pipeline {
	agent {
        node { 
			label "docker-katalon-ch"
        }
    }

//     parameters {

//     gitParameter(branchFilter: 'origin/(.*)', 
//         defaultValue: 'main', 
//         name: 'Branch', 
//         type: 'PT_BRANCH_TAG',
//         quickFilterEnabled: false, 
//         selectedValue: 'DEFAULT', 
//         sortMode: 'ASCENDING_SMART', 
//         tagFilter: '*', 
//         useRepository: 'https://github.com/CBIIT/active-testing-v2.git')

//     string(defaultValue: "VT_Test.prj", 
//         description: 'Enter the Katalon Project file (include the path relative to the repo root):', 
//         name: 'KatalonPrj')

//     string(defaultValue: "Test Suites/DEMO_Anita", 
//         description: 'Enter the Katalon Suite Path (not including the test suite file):', 
//         name: 'KatalonSuite')

//     string(defaultValue: "", 
//         description: 'Enter the Katalon TestOPS Collection ID to compare images against:', 
//         name: 'TestOpsCollectionID')

// //	extendedChoice( 
// //        name: 'Profile', 
// //        defaultValue: 'default', 
// //        description: 'Choose the profile to use', 
// //        type: 'PT_SINGLE_SELECT',
// //        value: 'DEV_ICDC,QA_ICDC,STAGE_ICDC,PROD_ICDC,QA_CTDC,QA_MTP,QA_INS,QA_CCDC' )

// 	string(defaultValue: "", 
//         description: 'Enter a list of email addresses to notify in case of test failures:', 
//         name: 'EmailRecipients')

//         }

    environment {

	  JOB_PATH = "Test_Automation"
	  TEST_JOB = "Katalon_prod"

    }
	
	stages{

		stage('checkout'){
            steps {

                checkout([$class: 'GitSCM', 
                    branches: [[name: 'test_scheduling']], 
                    doGenerateSubmoduleConfigurations: false,
					extensions: [],
					submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/CBIIT/Commons_Automation.git']]])

            }
        }


		stage('run tests'){
            
            steps {

				script {

					csv_content = readCSV file: 'jenkins/Test-Schedule.csv', format: CSVFormat.DEFAULT.withHeader()

					def now = new Date()
					def this_hour = now.format("HH", TimeZone.getTimeZone('America/New_York'))
					println this_hour

					for (def record : csv_content) {

						if (this_hour == record.get('Time')) {
						
						    println record.get('Branch')
						    println record.get('Katalon_Project')
						    println record.get('Katalon_Suite')
						    println record.get('Profile')
						    println record.get('Email_Recipients')
							//build job: "$JOB_PATH/$TEST_JOB", parameters: [gitParameter(name: 'Tag', value: "record.get('Branch')"), string(name: 'KatalonPrj', value: "record.get('Katalon_Project')"), string(name: 'KatalonSuite', value: "record.get('Katalon_Suite')"), extendedChoice(name: 'Browser', value: 'Chrome'), extendedChoice(name: 'Profile', value: "record.get('Profile')"), string(name: 'EmailRecipients', value: "record.get('Email_Recipients')")]

						}

					}

			   }

            }

        }

    }

	post {

		cleanup {

	        cleanWs()

	    }

	}

}